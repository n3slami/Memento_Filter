cmake_minimum_required(VERSION 3.16.3)
project(rangefilters-bench)

option(ALL_RENCODER "compile all REncoder implementation (SE/SS)" ON)

# fetch latest argparse
include(FetchContent)
FetchContent_Declare(
    argparse
    GIT_REPOSITORY https://github.com/p-ranav/argparse.git
    GIT_TAG        v2.7
)
FetchContent_MakeAvailable(argparse)

set(CMAKE_CXX_STANDARD 17)

list(APPEND SUCCINCT_LIBS "sux" "sdsl-lite")
list(APPEND Targets "memento" "rosetta" "snarf" "rencoder")
list(APPEND BTreeTargets "none" "memento")
list(APPEND x86Targets "rosetta" "rencoder" "memento")

function(compile_bench ds)
    if (NOT ds IN_LIST Targets)
        message(WARNING "${ds} is not defined")
        return()
    endif()
    if (ds IN_LIST x86Targets AND NOT CMAKE_SYSTEM_PROCESSOR MATCHES "(x86)|(X86)|(amd64)|(AMD64)")
        message(WARNING "cannot compile ${ds} on this architecture")
        return()
    endif()
    add_executable(bench_${ds} filters_benchmark/bench_${ds}.cpp)
    target_link_libraries(bench_${ds} argparse)

    if (ds MATCHES "memento")
        target_link_libraries(bench_memento mementolib)

        set(Boost_USE_STATIC_LIBS OFF)
        set(Boost_USE_STATIC_RUNTIME OFF)
        if (USE_BOOST AND USE_MULTI_THREADED)
            set(Boost_USE_MULTITHREADED ON)
            find_package(Boost REQUIRED COMPONENTS thread)
            message(STATUS "Boost found, using it for the multi-threaded version of the library")
            target_compile_definitions(bench_memento INTERFACE -DUSE_LIBRARY_BOOST_PARALLEL)
            target_link_libraries(bench_memento INTERFACE Boost::thread)
            target_include_directories(bench_memento INTERFACE ${Boost_INCLUDE_DIRS})
        elseif (USE_BOOST)
            set(Boost_USE_MULTITHREADED OFF)
            find_package(Boost REQUIRED)
            message(STATUS "Boost found, using it for the single-threaded version of the library")
            target_compile_definitions(bench_memento INTERFACE -DUSE_LIBRARY_BOOST)
            target_include_directories(bench_memento INTERFACE ${Boost_INCLUDE_DIRS})
        elseif (USE_MULTI_THREADED)
            message(STATUS "Using TBB and std::execution for the multi-threaded version of the library")
            find_package(TBB REQUIRED)
            target_compile_definitions(bench_memento INTERFACE -DUSE_LIBRARY_STL_PARALLEL)
            target_link_libraries(bench_memento INTERFACE tbb)
        else ()
            # target_compile_definitions(bench_memento INTERFACE -DUSE_LIBRARY_STL)
        endif ()

    elseif (ds MATCHES "rosetta")
        add_library(rosetta STATIC ./include/Rosetta/dst.cpp ./include/Rosetta/MurmurHash3.cpp)
        target_link_libraries(bench_rosetta rosetta)
    elseif(ds MATCHES "snarf" AND NOT CMAKE_SYSTEM_PROCESSOR MATCHES "(x86)|(X86)|(amd64)|(AMD64)")
        link_directories("/opt/homebrew/lib")
        include_directories("/opt/homebrew/include")
    elseif(ds MATCHES "rencoder")
        #target_compile_definitions(bench_rencoder PRIVATE USE_SIMD=1)
        #target_compile_options(bench_rencoder PRIVATE -mcmodel=medium -mavx512f -O2)
        target_compile_options(bench_rencoder PRIVATE -mcmodel=medium -march=native -O2)
    endif()
endfunction(compile_bench)

function(compile_b_tree_bench ds)
    if (NOT ds IN_LIST BTreeTargets)
        message(WARNING "${ds} is not defined")
        return()
    endif()
    if (ds IN_LIST x86Targets AND NOT CMAKE_SYSTEM_PROCESSOR MATCHES "(x86)|(X86)|(amd64)|(AMD64)")
        message(WARNING "cannot compile ${ds} on this architecture")
        return()
    endif()
    add_executable(bench_b_tree_${ds} b_tree_benchmark/bench_${ds}.cpp)
    target_include_directories(bench_b_tree_${ds} PUBLIC ./wiredtiger/build/include)
    target_link_libraries(bench_b_tree_${ds} argparse ${WIREDTIGER_LIB})

    if (ds MATCHES "memento")
        target_link_libraries(bench_b_tree_memento mementolib)

        set(Boost_USE_STATIC_LIBS OFF)
        set(Boost_USE_STATIC_RUNTIME OFF)
        if (USE_BOOST AND USE_MULTI_THREADED)
            set(Boost_USE_MULTITHREADED ON)
            find_package(Boost REQUIRED COMPONENTS thread)
            message(STATUS "Boost found, using it for the multi-threaded version of the library")
            target_compile_definitions(bench_b_tree_memento INTERFACE -DUSE_LIBRARY_BOOST_PARALLEL)
            target_link_libraries(bench_b_tree_memento INTERFACE Boost::thread)
            target_include_directories(bench_b_tree_memento INTERFACE ${Boost_INCLUDE_DIRS})
        elseif (USE_BOOST)
            set(Boost_USE_MULTITHREADED OFF)
            find_package(Boost REQUIRED)
            message(STATUS "Boost found, using it for the single-threaded version of the library")
            target_compile_definitions(bench_b_tree_memento INTERFACE -DUSE_LIBRARY_BOOST)
            target_include_directories(bench_b_tree_memento INTERFACE ${Boost_INCLUDE_DIRS})
        elseif (USE_MULTI_THREADED)
            message(STATUS "Using TBB and std::execution for the multi-threaded version of the library")
            find_package(TBB REQUIRED)
            target_compile_definitions(bench_b_tree_memento INTERFACE -DUSE_LIBRARY_STL_PARALLEL)
            target_link_libraries(bench_b_tree_memento INTERFACE tbb)
        else ()
            # target_compile_definitions(bench_b_tree_memento INTERFACE -DUSE_LIBRARY_STL)
        endif ()
    endif()
endfunction(compile_b_tree_bench)

foreach(ds ${Targets})
    compile_bench(${ds})
endforeach()

find_library(WIREDTIGER_LIB NAMES wiredtiger libwiredtiger PATHS ./wiredtiger/build/)
foreach(ds ${BTreeTargets})
    compile_b_tree_bench(${ds})
endforeach()

add_executable(workload_gen workload_gen.cpp)
target_link_libraries(workload_gen argparse)
